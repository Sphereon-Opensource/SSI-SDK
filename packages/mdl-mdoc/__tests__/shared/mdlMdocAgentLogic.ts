import { com } from '@sphereon/kmp-mdl-mdoc'
import { TAgent } from '@veramo/core'
//@ts-ignore
import express, { Application, NextFunction, Request, Response } from 'express'
import { ImDLMdoc } from '../../src'
import { funkePdTestVector, funkeTestCA, funkeTestIssuer, sphereonCA, sphereonTest } from './testvectors'
import CoseSign1Cbor = com.sphereon.crypto.cose.CoseSign1Cbor
import Jwk = com.sphereon.crypto.jose.Jwk
import decodeFrom = com.sphereon.kmp.decodeFrom
import Encoding = com.sphereon.kmp.Encoding
import IssuerSignedCbor = com.sphereon.mdoc.data.device.IssuerSignedCbor
import DocumentJson = com.sphereon.mdoc.data.device.DocumentJson
import encodeTo = com.sphereon.kmp.encodeTo

type ConfiguredAgent = TAgent<ImDLMdoc>

export default (testContext: { getAgent: () => ConfiguredAgent; setup: () => Promise<boolean>; tearDown: () => Promise<boolean> }): void => {
  describe('Certificate chain', (): void => {
    let agent: ConfiguredAgent

    beforeAll(async (): Promise<void> => {
      await testContext.setup()
      agent = testContext.getAgent()
    })

    it('should verify IETF Test Vector', async () => {
      const ietfTestVector =
        '8443a10126a10442313154546869732069732074686520636f6e74656e742e58408eb33e4ca31d1c465ab05aac34cc6b23d58fef5c083106c4d25a91aef0b0117e2af9a291aa32e14ab834dc56ed2a223444547e01f11d3b0916e5a4c345cacb36'

      const issuerAuth = CoseSign1Cbor.Static.cborDecode(decodeFrom(ietfTestVector, Encoding.HEX))
      try {
        await expect(
          agent.mdocVerifyIssuerSigned({
            input: issuerAuth.toJson(),
            keyInfo: {
              key: Jwk.Static.fromJson({
                kty: 'EC',
                kid: '11',
                crv: 'P-256',
                x: 'usWxHK2PmfnHKwXPS54m0kTcGJ90UiglWiGahtagnv8',
                y: 'IBOL-C3BttVivg-lSreASjpkttcsz-1rb7btKLv8EX4',
                // "d":"V8kgd2ZBRuh2dgyVINBUqpPDr7BOMGcF22CQMIUHtNM" // No private key, as we check for them explicitly
              }).jwkToCoseKeyJson(),
            },
          }),
        ).resolves.toMatchObject({
          critical: true,
          error: false,
          message: "Signature of '11' was valid",
        })
      } catch (error) {
        console.log(error)
      }
    })

    it('should verify Issuer Signed Test Vector', async () => {
      const funkeTestVector =
        ''
      const issuerSigned = IssuerSignedCbor.Static.cborDecode(decodeFrom(funkeTestVector, Encoding.HEX))
      await expect(
        agent.mdocVerifyIssuerSigned({
          input: issuerSigned.issuerAuth.toJson(),
        }),
      ).resolves.toMatchObject({
        critical: true,
        error: false,
        message: "Signature of 'C=DE,O=Bundesdruckerei GmbH,OU=I,CN=SPRIND Funke EUDI Wallet Prototype Issuer' was valid",
      })

      const mdoc = issuerSigned.toDocumentJson().toJsonDTO<DocumentJson>()
      console.log(JSON.stringify(mdoc, null, 2))
    })

    it('should Present with Signed Test Vector', async () => {
      const funkeTestVector =
        ''
      const issuerSigned = IssuerSignedCbor.Static.cborDecode(decodeFrom(funkeTestVector, Encoding.HEX))
      const mdoc = issuerSigned.toDocument()
      const mdocHex = encodeTo(mdoc.cborEncode(), Encoding.HEX)

      const present = await agent.mdocOid4vpHolderPresent({
        mdocHex,
        presentationDefinition: funkePdTestVector,
        trustAnchors: [sphereonCA, funkeTestCA],
        verifications: {
          allowExpiredDocuments: true,
        },
      })

      expect(present.vp_token).toBeDefined()
      expect(present.presentation_submission).toBeDefined()
      console.log(present.vp_token)
    })

    it('should be verified for Sphereon issued cert from CA', async () => {
      await expect(
        agent.x509VerifyCertificateChain({
          chain: [sphereonTest, sphereonCA],
          trustAnchors: [sphereonCA],
        }),
      ).resolves.toMatchObject({
        critical: false,
        error: false,
        message: 'Certificate chain was valid',
      })
    })

    it('should be verified for Sphereon issued cert from CA without providing full chain', async () => {
      await expect(
        agent.x509VerifyCertificateChain({
          chain: [sphereonTest],
          trustAnchors: [sphereonCA],
        }),
      ).resolves.toMatchObject({
        critical: false,
        error: false,
        message: 'Certificate chain was valid',
      })
    })

    it('should get certificate info and SANs', async () => {
      await expect(
        agent.x509GetCertificateInfo({
          certificates: [sphereonCA, sphereonTest],
        }),
      ).resolves.toMatchObject([
        {
          issuer: {
            dn: {
              DN: 'C=NL,O=Sphereon International B.V.,OU=IT,CN=ca.sphereon.com',
              attributes: { C: 'NL', CN: 'ca.sphereon.com', O: 'Sphereon International B.V.', OU: 'IT' },
            },
          },
          notAfter: new Date('2034-07-28T21:26:49.000Z'),
          notBefore: new Date('2024-07-28T21:26:49.000Z'),
          publicKeyJWK: {
            crv: 'P-256',
            ext: true,
            key_ops: ['verify'],
            kty: 'EC',
            x: 'SIDQp4RJI2s5yYIOBrxiwGRROCjBkbCq8vaf3UlSkAw',
            y: 'dRSwvlVFdqdiLXnk2pQqT1vZnDG0I-x-iz2EbdsG0aY',
          },
          subject: {
            dn: {
              DN: 'C=NL,O=Sphereon International B.V.,OU=IT,CN=ca.sphereon.com',
              attributes: { C: 'NL', CN: 'ca.sphereon.com', O: 'Sphereon International B.V.', OU: 'IT' },
            },
            subjectAlternativeNames: [],
          },
        },
        {
          issuer: {
            dn: {
              DN: 'C=NL,O=Sphereon International B.V.,OU=IT,CN=ca.sphereon.com',
              attributes: { C: 'NL', CN: 'ca.sphereon.com', O: 'Sphereon International B.V.', OU: 'IT' },
            },
          },
          notAfter: new Date('2024-11-04T22:16:12.000Z'),
          notBefore: new Date('2024-08-06T20:16:12.000Z'),
          publicKeyJWK: {
            crv: 'P-256',
            ext: true,
            key_ops: ['verify'],
            kty: 'EC',
            x: 'pyVHVR7IdgWmG_TLb3-K_4dg3XC6GQQWDB61Lna15ns',
            y: 'OcVNCBD0kMmqEaKjbczwd2GvbV1AOxgE7AKsa3L0zxM',
          },
          subject: {
            dn: {
              DN: 'CN=test123.test.sphereon.com',
              attributes: { CN: 'test123.test.sphereon.com' },
            },
            subjectAlternativeNames: [{ type: 2, value: 'test123.test.sphereon.com' }],
          },
        },
      ])
    })

    it('should be verified for Funke issued cert from CA', async () => {
      await expect(
        agent.x509VerifyCertificateChain({
          chain: [funkeTestIssuer, funkeTestCA],
          trustAnchors: [funkeTestCA],
        }),
      ).resolves.toMatchObject({
        critical: false,
        error: false,
        message: 'Certificate chain was valid',
      })
    })

    it('should not be verified for Sphereon issued cert from CA when CA is not in trust anchors', async () => {
      await expect(
        agent.x509VerifyCertificateChain({
          chain: [sphereonTest, sphereonCA],
          trustAnchors: [funkeTestCA],
        }),
      ).resolves.toMatchObject({
        critical: true,
        error: true,
        message: 'No valid certificate paths found',
      })
    })

    afterAll(() => {
      testContext.tearDown
    })
  })
}
