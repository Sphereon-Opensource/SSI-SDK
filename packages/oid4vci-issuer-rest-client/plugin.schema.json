{
  "IOID4VCIRestClient": {
    "components": {
      "schemas": {
        "IOID4VCIClientCreateOfferUriRequestArgs": {
          "type": "object",
          "properties": {
            "credential_issuer": {
              "type": "string",
              "description": "REQUIRED. The URL of the Credential Issuer, as defined in Section 11.2.1, from which the Wallet is requested to obtain one or more Credentials. The Wallet uses it to obtain the Credential Issuer's Metadata following the steps defined in Section 11.2.2."
            },
            "credential_configuration_ids": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "REQUIRED. Array of unique strings that each identify one of the keys in the name/value pairs stored in the credential_configurations_supported Credential Issuer metadata. The Wallet uses these string values to obtain the respective object that contains information about the Credential being offered as defined in Section 11.2.3. For example, these string values can be used to obtain scope values to be used in the Authorization Request."
            },
            "grants": {
              "$ref": "#/components/schemas/Grant",
              "description": "OPTIONAL. A JSON object indicating to the Wallet the Grant Types the Credential Issuer's AS is prepared to process for this credential offer. Every grant is represented by a key and an object. The key value is the Grant Type identifier, the object MAY contain parameters either determining the way the Wallet MUST use the particular grant and/or parameters the Wallet MUST send with the respective request(s). If grants is not present or empty, the Wallet MUST determine the Grant Types the Credential Issuer's AS supports using the respective metadata. When multiple grants are present, it's at the Wallet's discretion which one to use."
            },
            "client_id": {
              "type": "string",
              "description": "Some implementations might include a client_id in the offer. For instance EBSI in a same-device flow. (Cross-device tucks it in the state JWT)"
            },
            "credentialDataSupplierInput": {
              "$ref": "#/components/schemas/CredentialDataSupplierInput"
            },
            "agentBaseUrl": {
              "type": "string"
            }
          },
          "required": ["credential_configuration_ids", "credential_issuer"]
        },
        "Grant": {
          "type": "object",
          "properties": {
            "authorization_code": {
              "$ref": "#/components/schemas/GrantAuthorizationCode"
            },
            "urn:ietf:params:oauth:grant-type:pre-authorized_code": {
              "$ref": "#/components/schemas/GrantUrnIetf"
            }
          }
        },
        "GrantAuthorizationCode": {
          "type": "object",
          "properties": {
            "issuer_state": {
              "type": "string",
              "description": "OPTIONAL. String value created by the Credential Issuer and opaque to the Wallet that is used to bind the subsequent Authorization Request with the Credential Issuer to a context set up during previous steps."
            },
            "authorization_server": {
              "type": "string",
              "description": "OPTIONAL string that the Wallet can use to identify the Authorization Server to use with this grant type when authorization_servers parameter in the Credential Issuer metadata has multiple entries. MUST NOT be used otherwise. The value of this parameter MUST match with one of the values in the authorization_servers array obtained from the Credential Issuer metadata"
            }
          }
        },
        "GrantUrnIetf": {
          "type": "object",
          "properties": {
            "pre-authorized_code": {
              "type": "string",
              "description": "REQUIRED. The code representing the Credential Issuer's authorization for the Wallet to obtain Credentials of a certain type."
            },
            "tx_code": {
              "$ref": "#/components/schemas/TxCode",
              "description": "OPTIONAL. Object specifying whether the Authorization Server expects presentation of a Transaction Code by the End-User along with the Token Request in a Pre-Authorized Code Flow. If the Authorization Server does not expect a Transaction Code, this object is absent; this is the default. The Transaction Code is intended to bind the Pre-Authorized Code to a certain transaction to prevent replay of this code by an attacker that, for example, scanned the QR code while standing behind the legitimate End-User. It is RECOMMENDED to send the Transaction Code via a separate channel. If the Wallet decides to use the Pre-Authorized Code Flow, the Transaction Code value MUST be sent in the tx_code parameter with the respective Token Request as defined in Section 6.1. If no length or description is given, this object may be empty, indicating that a Transaction Code is required."
            },
            "interval": {
              "type": "number",
              "description": "OPTIONAL. The minimum amount of time in seconds that the Wallet SHOULD wait between polling requests to the token endpoint (in case the Authorization Server responds with error code authorization_pending - see Section 6.3). If no value is provided, Wallets MUST use 5 as the default."
            },
            "authorization_server": {
              "type": "string",
              "description": "OPTIONAL string that the Wallet can use to identify the Authorization Server to use with this grant type when authorization_servers parameter in the Credential Issuer metadata has multiple entries. MUST NOT be used otherwise. The value of this parameter MUST match with one of the values in the authorization_servers array obtained from the Credential Issuer metadata"
            },
            "user_pin_required": {
              "type": "boolean",
              "description": "OPTIONAL. Boolean value specifying whether the AS expects presentation of the End-User PIN along with the Token Request in a Pre-Authorized Code Flow. Default is false. This PIN is intended to bind the Pre-Authorized Code to a certain transaction to prevent replay of this code by an attacker that, for example, scanned the QR code while standing behind the legitimate End-User. It is RECOMMENDED to send a PIN via a separate channel. If the Wallet decides to use the Pre-Authorized Code Flow, a PIN value MUST be sent in the user_pin parameter with the respective Token Request."
            }
          },
          "required": ["pre-authorized_code"]
        },
        "TxCode": {
          "type": "object",
          "properties": {
            "input_mode": {
              "$ref": "#/components/schemas/InputCharSet",
              "description": "OPTIONAL. String specifying the input character set. Possible values are numeric (only digits) and text (any characters). The default is numeric."
            },
            "length": {
              "type": "number",
              "description": "OPTIONAL. Integer specifying the length of the Transaction Code. This helps the Wallet to render the input screen and improve the user experience."
            },
            "description": {
              "type": "string",
              "description": "OPTIONAL. String containing guidance for the Holder of the Wallet on how to obtain the Transaction Code, e.g., describing over which communication channel it is delivered. The Wallet is RECOMMENDED to display this description next to the Transaction Code input screen to improve the user experience. The length of the string MUST NOT exceed 300 characters. The description does not support internationalization, however the Issuer MAY detect the Holder's language by previous communication or an HTTP Accept-Language header within an HTTP GET request for a Credential Offer URI."
            }
          }
        },
        "InputCharSet": {
          "type": "string",
          "enum": ["numeric", "text"]
        },
        "CredentialDataSupplierInput": {
          "description": "Optional storage that can help the credential Data Supplier. For instance to store credential input data during offer creation, if no additional data can be supplied later on"
        },
        "IOID4VCIClientCreateOfferUriResponse": {
          "type": "object",
          "properties": {
            "uri": {
              "type": "string"
            },
            "correlationId": {
              "type": "string"
            },
            "qrCodeDataUri": {
              "type": "string"
            },
            "userPin": {
              "type": "string"
            },
            "txCode": {
              "$ref": "#/components/schemas/TxCode"
            }
          },
          "required": ["uri", "correlationId"]
        },
        "IOID4VCIClientGetIssueStatusArgs": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "baseUrl": {
              "type": "string"
            }
          },
          "required": ["id"]
        },
        "IssueStatusResponse": {
          "type": "object",
          "properties": {
            "createdAt": {
              "type": "number"
            },
            "lastUpdatedAt": {
              "type": "number"
            },
            "expiresAt": {
              "type": "number"
            },
            "status": {
              "$ref": "#/components/schemas/IssueStatus"
            },
            "error": {
              "type": "string"
            },
            "clientId": {
              "type": "string"
            },
            "statusLists": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/StatusListOpts"
              }
            }
          },
          "required": ["createdAt", "lastUpdatedAt", "status"]
        },
        "IssueStatus": {
          "type": "string",
          "enum": [
            "OFFER_CREATED",
            "ACCESS_TOKEN_REQUESTED",
            "ACCESS_TOKEN_CREATED",
            "CREDENTIAL_REQUEST_RECEIVED",
            "CREDENTIAL_ISSUED",
            "NOTIFICATION_CREDENTIAL_ACCEPTED",
            "NOTIFICATION_CREDENTIAL_DELETED",
            "NOTIFICATION_CREDENTIAL_FAILURE",
            "ERROR"
          ]
        },
        "StatusListOpts": {
          "type": "object",
          "properties": {
            "statusListId": {
              "type": "string"
            },
            "statusListCorrelationId": {
              "type": "string"
            },
            "statusListIndex": {
              "type": "number"
            },
            "statusEntryCorrelationId": {
              "type": "string"
            }
          }
        }
      },
      "methods": {
        "oid4vciClientCreateOfferUri": {
          "description": "",
          "arguments": {
            "$ref": "#/components/schemas/IOID4VCIClientCreateOfferUriRequestArgs"
          },
          "returnType": {
            "$ref": "#/components/schemas/IOID4VCIClientCreateOfferUriResponse"
          }
        },
        "oid4vciClientGetIssueStatus": {
          "description": "",
          "arguments": {
            "$ref": "#/components/schemas/IOID4VCIClientGetIssueStatusArgs"
          },
          "returnType": {
            "$ref": "#/components/schemas/IssueStatusResponse"
          }
        }
      }
    }
  }
}
